@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject IAuthService AuthService
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<MainLayout> Logger

<PageTitle>GeekApp</PageTitle>

<div class="main-layout">
    <CascadingAuthenticationState>
        <Navbar />
    </CascadingAuthenticationState>

    <div class="main-content">
        @Body
    </div>

    <Footer />
</div>

@code {
    private bool _ready = false;
    private string _result;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogDebug("Checking authentication state in MainLayout.");
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity?.IsAuthenticated ?? false)
                {
                    var userId = user.FindFirst("nameid")?.Value;
                    Logger.LogDebug("Authenticated user found with UserId: {UserId}", userId);

                    var http = HttpClientFactory.CreateClient("AuthorizedAPI");
                    _result = await http.GetStringAsync("api/lists/all");
                    Logger.LogInformation("Lists fetched successfully in MainLayout.");
                }
                else
                {
                    Logger.LogDebug("User is not authenticated. Skipping list fetch.");
                }

                _ready = true;
                StateHasChanged();
            }
            catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Logger.LogWarning("Unauthorized access when fetching lists.");
                _ready = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to fetch lists in MainLayout.");
                _ready = true;
                StateHasChanged();
            }
        }
    }

    private async Task Logout()
    {
        try
        {
            Logger.LogDebug("Initiating logout in MainLayout.");
            await AuthService.LogoutAsync();
            Logger.LogInformation("Logout successful in MainLayout.");
            NavManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Logout failed in MainLayout.");
        }
    }
}
