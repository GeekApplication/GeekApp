@page "/discover"
@using GeekApp.Shared.ApiModels
@using GeekApp.Shared.Lists
@using Microsoft.AspNetCore.Components.Authorization
@inject IContentService ContentService
@inject IListService ListService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<Discover> Logger
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="min-vh-100 bg-tepapa-green text-white">
    <div class="container py-5">
        <h1 class="h2 fw-bold mb-4 orbitron">Discover Movies & TV Shows</h1>

        <!-- Filters -->
        <div class="mb-4">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Media Type</label>
                    <select class="form-select" @bind="MediaType" @bind:event="onchange">
                        <option value="movie">Movies</option>
                        <option value="tv">TV Shows</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Sort By</label>
                    <select class="form-select" @bind="SortBy" @bind:event="onchange">
                        <option value="popularity.desc">Popularity</option>
                        <option value="vote_average.desc">Rating (High to Low)</option>
                        <option value="vote_count.desc">Most Voted</option>
                        @if (MediaType == "movie")
                        {
                            <option value="revenue.desc">Revenue (High to Low)</option>
                        }
                        @if (MediaType == "tv")
                        {
                            <option value="first_air_date.desc">Air Date (Newest)</option>
                            <option value="first_air_date.asc">Air Date (Oldest)</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Release Year Range</label>
                    <div class="input-group">
                        <input type="number" class="form-control" placeholder="From" @bind="tempMinYear" min="1900" max="@DateTime.Now.Year" />
                        <input type="number" class="form-control" placeholder="To" @bind="tempMaxYear" min="1900" max="@DateTime.Now.Year" />
                        <button class="btn btn-light-blue" @onclick="ApplyYearRange">Apply</button>
                    </div>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Genres</label>
                    <div class="genre-checkboxes" style="max-height: 150px; overflow-y: auto;">
                        @foreach (var genre in genres)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="genre-@genre.Id"
                                       checked="@selectedGenres.Contains(genre.Id)"
                                       @onchange="e => ToggleGenre(genre.Id, e.Value)"
                                       disabled="@(selectedGenres.Count >= 3 && !selectedGenres.Contains(genre.Id))" />
                                <label class="form-check-label" for="genre-@genre.Id">@genre.Name</label>
                            </div>
                        }
                    </div>
                    @if (selectedGenres.Count >= 3)
                    {
                        <small class="text-warning">Maximum 3 genres allowed.</small>
                    }
                </div>
            </div>
            <div class="mt-3">
                <button class="btn btn-light-blue" @onclick="ForceRefresh">Refresh Results</button>
            </div>
        </div>

        <!-- Results -->
        @if (isLoading)
        {
            <div class="d-flex align-items-center justify-content-center">
                <div class="spinner-border text-light-blue" role="status"></div>
                <span class="ms-3 fs-5">Loading...</span>
            </div>
        }
        else if (errorMessage != null)
        {
            <div class="alert @(errorMessage.Contains("successfully") ? "alert-success" : "alert-danger") shadow-sm" role="alert">
                <strong>@(errorMessage.Contains("successfully") ? "Success" : "Error"):</strong> @errorMessage
            </div>
        }
        else if (displayedResults != null)
        {
            <h2 class="h3 fw-bold mb-4 orbitron">Discover Results</h2>
            <div class="row row-cols-2 row-cols-sm-3 row-cols-md-4 row-cols-lg-5 g-4" id="results-container">
                @foreach (var result in displayedResults)
                {
                    var mediaType = result.MediaType ?? MediaType;
                    var isInWatchlist = watchlistStatus.ContainsKey((mediaType, result.Id)) && watchlistStatus[(mediaType, result.Id)];
                    <div class="col">
                        <div class="result-card bg-gray-800 rounded-3 shadow-sm text-center text-decoration-none position-relative">
                            <a href="/@(mediaType)/@result.Id" class="d-block">
                                <img src="@result.PosterPath" alt="@(result.Title ?? result.Name ?? "Unknown")"
                                     class="img-fluid rounded-top result-img"
                                     onerror="this.src='/images/errorimage.jpg'" />
                            </a>
                            <button class="btn btn-md position-absolute top-0 end-0 m-2 @(isInWatchlist ? "btn-success" : "btn-warning") px-2.5 py-1.5 watchlist-btn"
                                    title="@(isInWatchlist ? "Remove from Watchlist" : "Add to Watchlist")"
                                    @onclick="() => ToggleWatchlist(mediaType, result.Id)">
                                @(isInWatchlist ? "➖" : "➕")
                            </button>
                            <div class="p-3">
                                <p class="fw-medium text-white mb-1">@(result.Title ?? result.Name ?? "Unknown")</p>
                                <p class="text-sm text-gray-400 mb-0">
                                    @(mediaType == "movie" ? "Movie" : "TV Show") - @(result.ReleaseDate ?? result.FirstAirDate ?? "N/A")
                                </p>
                            </div>
                        </div>
                    </div>
                }
            </div>

            @if (hasMoreResults)
            {
                <div class="text-center mt-4">
                    <button class="btn btn-light-blue" @onclick="LoadMoreResults" disabled="@isLoadingMore">
                        @(isLoadingMore ? "Loading..." : "Load More")
                    </button>
                </div>
            }
        }
    </div>
</div>

@code {
    #region State Variables
    private string mediaType = "movie";
    private string sortBy = "popularity.desc";
    private int? minYear;
    private int? maxYear;
    private int? tempMinYear;
    private int? tempMaxYear;
    private List<int> selectedGenres = new();
    private List<TmdbGenre> genres = new();
    private List<TmdbResult> displayedResults = new();
    private bool isLoading = true;
    private bool isLoadingMore = false;
    private string errorMessage;
    private int currentPage = 1;
    private bool hasMoreResults = true;
    private const int MinVoteCount = 300;
    private string cacheVersion = Guid.NewGuid().ToString("N")[..8];
    private DotNetObjectReference<Discover>? objRef;
    private bool isDisposed;
    private Dictionary<(string MediaType, int TmdbId), bool> watchlistStatus = new();
    #endregion

    #region Properties
    private string MediaType
    {
        get => mediaType;
        set
        {
            if (mediaType != value)
            {
                mediaType = value;
                cacheVersion = Guid.NewGuid().ToString("N")[..8];
                _ = ResetAndLoad(); // Run asynchronously without awaiting
            }
        }
    }

    private string SortBy
    {
        get => sortBy;
        set
        {
            if (sortBy != value)
            {
                sortBy = value;
                cacheVersion = Guid.NewGuid().ToString("N")[..8];
                _ = ResetAndLoad(); // Run asynchronously without awaiting
            }
        }
    }
    #endregion

    #region Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        currentPage = 1;
        await InitializeWatchlist();
        await LoadGenres();
        await LoadDiscoverResults();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("scrollHelpers.setupInfiniteScroll", objRef);
        }
    }

    public void Dispose()
    {
        if (!isDisposed)
        {
            objRef?.Dispose();
            isDisposed = true;
        }
    }
    #endregion

    #region Event Handlers
    [JSInvokable]
    public async Task LoadMoreIfAtBottom()
    {
        if (!isLoading && !isLoadingMore && hasMoreResults)
        {
            await LoadMoreResults();
        }
    }

    private async Task ApplyYearRange()
    {
        minYear = tempMinYear;
        maxYear = tempMaxYear;
        cacheVersion = Guid.NewGuid().ToString("N")[..8];
        displayedResults.Clear();
        currentPage = 1;
        hasMoreResults = true;
        await InitializeWatchlist();
        await LoadDiscoverResults();
        UpdateUrl();
    }

    private async Task ToggleGenre(int genreId, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!selectedGenres.Contains(genreId) && selectedGenres.Count < 3)
                selectedGenres.Add(genreId);
        }
        else
        {
            selectedGenres.Remove(genreId);
        }
        cacheVersion = Guid.NewGuid().ToString("N")[..8];
        displayedResults.Clear();
        currentPage = 1;
        hasMoreResults = true;
        await InitializeWatchlist();
        await LoadDiscoverResults();
    }

    private async Task ForceRefresh()
    {
        cacheVersion = Guid.NewGuid().ToString("N")[..8];
        displayedResults.Clear();
        currentPage = 1;
        hasMoreResults = true;
        await InitializeWatchlist();
        await LoadDiscoverResults();
    }

    private async Task LoadMoreResults()
    {
        if (!hasMoreResults || isLoading) return;

        try
        {
            isLoadingMore = true;
            StateHasChanged();

            var scrollPosition = await JSRuntime.InvokeAsync<double>("scrollHelpers.getScrollPosition");
            currentPage++;
            await LoadDiscoverResults();
            await JSRuntime.InvokeVoidAsync("scrollHelpers.setScrollPosition", scrollPosition);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading more results");
        }
        finally
        {
            isLoadingMore = false;
            StateHasChanged();
        }
    }

    private async Task ToggleWatchlist(string mediaType, int tmdbId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        var key = (mediaType, tmdbId);
        var isInWatchlist = watchlistStatus.ContainsKey(key) && watchlistStatus[key];

        try
        {
            Logger.LogDebug("{Action} watchlist: {MediaType}, TMDB ID: {TmdbId}", isInWatchlist ? "Removing from" : "Adding to", mediaType, tmdbId);
            if (isInWatchlist)
            {
                await ListService.RemoveFromWatchlistAsync(mediaType, tmdbId);
                watchlistStatus[key] = false;
                Logger.LogInformation("Removed from watchlist: {MediaType}, TMDB ID: {TmdbId}", mediaType, tmdbId);
            }
            else
            {
                await ListService.AddToWatchlistAsync(mediaType, tmdbId);
                watchlistStatus[key] = true;
                Logger.LogInformation("Added to watchlist: {MediaType}, TMDB ID: {TmdbId}", mediaType, tmdbId);
            }
        }
        catch (UnauthorizedAccessException)
        {
            Logger.LogWarning("Unauthorized access when toggling watchlist.");
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to toggle watchlist: {MediaType}, TMDB ID: {TmdbId}", mediaType, tmdbId);
        }
        StateHasChanged();
    }
    #endregion

    #region Data Methods
    private async Task ResetAndLoad()
    {
        displayedResults.Clear();
        currentPage = 1;
        hasMoreResults = true;
        await InitializeWatchlist();
        await LoadGenres();
        await LoadDiscoverResults();
    }

    private async Task LoadGenres()
    {
        try
        {
            isLoading = true;
            genres = await ContentService.GetGenresAsync(mediaType);
            selectedGenres = selectedGenres.Where(g => genres.Any(genre => genre.Id == g)).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load genres: {ex.Message}";
            Logger.LogError(ex, "Failed to load genres");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDiscoverResults()
    {
        try
        {
            isLoading = true;
            await InitializeWatchlist(); // Ensure watchlist is initialized for refreshes

            int? minVoteCount = sortBy == "vote_average.desc" ? MinVoteCount : null;

            var discoverResults = await ContentService.DiscoverAsync(
                mediaType,
                currentPage,
                sortBy,
                minYear,
                maxYear,
                selectedGenres.Any() ? selectedGenres : null,
                minVoteCount);

            hasMoreResults = currentPage < discoverResults.TotalPages;

            var newResults = discoverResults.Results
                .Where(r => r.MediaType != "person")
                .ToList();

            if (currentPage == 1)
            {
                displayedResults = newResults;
            }
            else
            {
                displayedResults.AddRange(newResults);
                displayedResults = SortDisplayedResults(displayedResults);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading discover results");
            hasMoreResults = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    #endregion

    #region Helper Methods
    private List<TmdbResult> SortDisplayedResults(List<TmdbResult> results)
    {
        if (string.IsNullOrEmpty(sortBy)) return results;

        return sortBy switch
        {
            "popularity.desc" => results.OrderByDescending(r => r.Popularity).ToList(),
            "vote_average.desc" => results
                .Where(r => r.VoteCount >= MinVoteCount)
                .OrderByDescending(r => r.VoteAverage)
                .ToList(),
            "vote_count.desc" => results.OrderByDescending(r => r.VoteCount).ToList(),
            "revenue.desc" => results.OrderByDescending(r => r.Revenue ?? 0).ToList(),
            "first_air_date.desc" => results.OrderByDescending(r =>
                DateTime.TryParse(r.FirstAirDate ?? r.ReleaseDate, out var date) ? date : DateTime.MinValue).ToList(),
            "first_air_date.asc" => results.OrderBy(r =>
                DateTime.TryParse(r.FirstAirDate ?? r.ReleaseDate, out var date) ? date : DateTime.MaxValue).ToList(),
            _ => results
        };
    }

    private void UpdateUrl()
    {
        var url = $"/discover?mediaType={mediaType}&sortBy={sortBy}";
        if (minYear.HasValue) url += $"&minYear={minYear}";
        if (maxYear.HasValue) url += $"&maxYear={maxYear}";
        if (selectedGenres.Any()) url += $"&genres={string.Join(",", selectedGenres)}";
        Navigation.NavigateTo(url, forceLoad: false);
    }

    private async Task InitializeWatchlist()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            try
            {
                var watchlist = await ListService.GetWatchlistAsync();
                watchlistStatus.Clear(); // Clear to avoid stale entries
                foreach (var item in watchlist.Items)
                {
                    watchlistStatus[(item.MediaType, item.TmdbId)] = true;
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to initialize watchlist");
            }
        }
    }
    #endregion
}